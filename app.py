# app.py ‚Äî LINE ÊïÖ‰∫ãÁπ™Êú¨Ê©üÂô®‰∫∫
# - OpenAI Áõ∏ÂÆπÂºèÂ∞éÂÖ•ÔºàÈÅøÂÖç‰∏çÂêå 1.x Â∞èÁâàÈÄ†ÊàêÂåØÂÖ•ÈåØË™§Ôºâ
# - gpt-image-1 ÂÆåÊï¥ÈåØË™§Ëº∏Âá∫Ôºà403/ÂÆâÂÖ®ÊîîÊà™Á≠âÔºâ
# - GCS Âè™Áî® V4 Á∞ΩÂêçÁ∂≤ÂùÄÔºàÁõ∏ÂÆπ Uniform bucket-level access / PAPÔºâ
# - Slot ÊäΩÂèñËàáÊ¨Ñ‰ΩçÂ°´ÂÖÖÔºöÂè™ËøΩÂïèÁº∫ÁöÑË≥áË®äÔºåÈÅøÂÖçÈáçË§áÊèêÂïè
# - ÊïÖ‰∫ãÊï¥ÁêÜÂàá 5 ÊÆµ + Èö±ËóèÂèÉËÄÉÂúñ + ËßíËâ≤‰∏ÄËá¥ÊÄß

import os, sys, json, re, uuid, time, threading, traceback, random, base64, requests
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

# ---------- Âü∫Á§é ----------
sys.stdout.reconfigure(encoding="utf-8")
print("üöÄ app boot: signed-url mode active, no make_public()")

# ---------- Flask / LINE ----------
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageSendMessage

# ---------- OpenAI 1.xÔºàÁõ∏ÂÆπÂºèÂ∞éÂÖ•Ôºâ ----------
import openai as _openai_mod

OpenAI = _openai_mod.OpenAI  # ÂÆ¢Êà∂Á´Ø

def _pick(*names, default=Exception):
    """Âæû openai Ê®°ÁµÑÊàñ openai._exceptions ÈáåÊãø‰æãÂ§ñÈ°ûÂà•ÔºõÂèñ‰∏çÂà∞ÂõûÂÇ≥ default„ÄÇ"""
    for n in names:
        obj = getattr(_openai_mod, n, None)
        if obj:
            return obj
    try:
        exc_mod = __import__("openai._exceptions", fromlist=["*"])
        for n in names:
            obj = getattr(exc_mod, n, None)
            if obj:
                return obj
    except Exception:
        pass
    return default

APIStatusError        = _pick("APIStatusError", "APIError")
APIConnectionError    = _pick("APIConnectionError")
RateLimitError        = _pick("RateLimitError")
AuthenticationError   = _pick("AuthenticationError")
BadRequestError       = _pick("BadRequestError")
PermissionDeniedError = _pick("PermissionDeniedError")

# ---------- Firebase / Firestore / GCS ----------
import firebase_admin
from firebase_admin import credentials, firestore
from google.cloud import storage as gcs

# ================== Ë®≠ÂÆö ==================
app = Flask(__name__)

LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET      = os.environ.get("LINE_CHANNEL_SECRET")
OPENAI_API_KEY           = os.environ.get("OPENAI_API_KEY")
FIREBASE_CREDENTIALS     = os.environ.get("FIREBASE_CREDENTIALS")  # JSON Â≠ó‰∏≤
GCS_BUCKET               = os.environ.get("GCS_BUCKET", "storybotimage")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler      = WebhookHandler(LINE_CHANNEL_SECRET)
client       = OpenAI(api_key=OPENAI_API_KEY)

def _firebase_creds():
    return credentials.Certificate(json.loads(FIREBASE_CREDENTIALS))
if not firebase_admin._apps:
    firebase_admin.initialize_app(_firebase_creds())
db         = firestore.client()
gcs_client = gcs.Client()
bucket     = gcs_client.bucket(GCS_BUCKET)

# ================== ÁãÄÊÖã / Ê®°Êùø ==================
GEN_SEMAPHORE = threading.Semaphore(2)
user_sessions = {}  # {uid: {"messages":[...], "story_id": "..."}}

STYLE_PROMPT = (
    "watercolor storybook illustration, warm earthy palette, soft brush textures, "
    "clean composition, child-friendly shapes, consistent character design"
)
CONSISTENCY_GUARD = (
    "Keep the same character identity across images: same face shape, hairstyle, outfit, color palette; "
    "subtle variations only (~25%)."
)
SAFE_HEADSHOT_EXTRA = (
    "Neutral head-and-shoulders portrait, soft lighting, plain background. "
    "No text, letters, logos, watermarks, signage, or brand names."
)

SLOT_KEYS = ["character", "appearance", "location", "time", "goal", "conflict", "resolution", "tone"]
MANDATORY_SLOTS = ["character", "location", "goal"]  # ÊúÄÂ∞ëÈúÄË¶Å

# ================== ÈÄöÁî®Â∑•ÂÖ∑ ==================
def gcs_upload_bytes(data: bytes, filename: str, content_type="image/png") -> str:
    """‰∏äÂÇ≥Âà∞ GCSÔºõÊ∞∏ÈÅ†ÂõûÂÇ≥ V4 Á∞ΩÂêçÁ∂≤ÂùÄÔºàÁõ∏ÂÆπ Uniform / Public Access PreventionÔºâ"""
    blob = bucket.blob(f"line_images/{filename}")
    blob.upload_from_string(data, content_type=content_type)

    ttl_days = int(os.environ.get("GCS_SIGNED_URL_DAYS", "14"))
    url = blob.generate_signed_url(
        version="v4",
        expiration=datetime.utcnow() + timedelta(days=ttl_days),
        method="GET",
        response_disposition=f'inline; filename="{filename}"',
        content_type=content_type,
    )
    print("‚úÖ GCS uploaded (signed URL):", url)
    return url

def save_story(story_id: str, data: dict):
    db.collection("stories").document(story_id).set(data, merge=True)

def read_story(story_id: str) -> Optional[dict]:
    doc = db.collection("stories").document(story_id).get()
    return doc.to_dict() if doc.exists else None

def save_scene(story_id: str, idx: int, data: dict):
    db.collection("stories").document(story_id).collection("scenes").document(str(idx)).set(data, merge=True)

def read_scene(story_id: str, idx: int) -> Optional[dict]:
    d = db.collection("stories").document(story_id).collection("scenes").document(str(idx)).get()
    return d.to_dict() if d.exists else None

def read_prev_image_url(story_id: str, idx: int) -> Optional[str]:
    if idx <= 1: return None
    prev = read_scene(story_id, idx-1)
    return prev.get("image_url") if prev else None

def save_chat(user_id, role, text):
    try:
        db.collection("users").document(user_id).collection("chat").add({
            "role": role, "text": text, "timestamp": firestore.SERVER_TIMESTAMP
        })
    except Exception as e:
        print("‚ö†Ô∏è save_chat Â§±Êïó:", e)

# ================== LLM Âä©Êâã ==================
def llm_chat(messages: List[Dict[str, Any]], temperature=0.2, model="gpt-4o-mini") -> str:
    try:
        resp = client.chat.completions.create(model=model, messages=messages, temperature=temperature)
        return resp.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå llm_chat error:", repr(e))
        return ""

def split_into_five_scenes(story_text: str) -> List[str]:
    msgs = [
        {"role":"system","content":"Segment the story into exactly 5 concise scene descriptions (1‚Äì2 sentences each). Return a plain 5-line list."},
        {"role":"user","content": story_text}
    ]
    raw = llm_chat(msgs, temperature=0.2)
    scenes = [re.sub(r"^[\-\‚Ä¢\d\.\s]+","", s).strip() for s in raw.splitlines() if s.strip()]
    scenes = (scenes + ["(empty scene)"]*5)[:5] if len(scenes) < 5 else scenes[:5]
    print("üß© scenes:", scenes)
    return scenes

def extract_features_from_text(story_text: str) -> dict:
    msgs = [
        {"role":"system","content":"Extract concise reusable character descriptors as JSON keys: gender, age, hair, outfit, accessory, face, vibe. Infer neutral values if missing."},
        {"role":"user","content": story_text}
    ]
    out = llm_chat(msgs, temperature=0.2)
    try:
        data = json.loads(out)
    except Exception:
        data = {}
    data.setdefault("gender","female")
    data.setdefault("age","30s-40s")
    data.setdefault("hair","shoulder-length dark brown hair")
    data.setdefault("outfit","pink long dress")
    data.setdefault("face","gentle smile, round face")
    data.setdefault("vibe","warm, capable, kind")
    print("üé≠ features:", data)
    return data

def refine_features_with_image(image_url: str, curr: dict) -> dict:
    msgs = [
        {"role":"system","content":"Refine character descriptors from the image. Keep keys: gender, age, hair, outfit, accessory, face, vibe. Return pure JSON."},
        {"role":"user","content":[
            {"type":"text","text":"Return JSON only."},
            {"type":"image_url","image_url":{"url": image_url}}
        ]}
    ]
    out = llm_chat(msgs, temperature=0.2)
    try:
        upd = json.loads(out)
        curr.update({k:v for k,v in upd.items() if v})
        print("ü™û refined features:", curr)
    except Exception:
        pass
    return curr

def build_prompt(scene_desc: str, features: dict, extra: str = "") -> str:
    role_bits = [features.get(k) for k in ["gender","age","hair","outfit","accessory","face","vibe"] if features.get(k)]
    role_str  = ", ".join(role_bits)
    return f"{STYLE_PROMPT}. Main character: {role_str}. {CONSISTENCY_GUARD} {extra} Scene: {scene_desc}"

# ================== OpenAI ÂúñÁâáÔºàÂÆåÊï¥ÈåØË™§Ëº∏Âá∫Ôºâ ==================
def _decode_image_response(resp) -> bytes:
    return base64.b64decode(resp.data[0].b64_json)

def _print_api_error(prefix: str, err: Exception):
    print(f"{prefix}: {err.__class__.__name__}")
    if isinstance(err, APIStatusError):
        print("  status_code:", getattr(err, "status_code", None))
        msg = getattr(err, "message", "")
        if msg: print("  message:", msg)
        try:
            body = err.response.text
            if body:
                print("  response body:", body[:2048])
        except Exception:
            pass
    else:
        print("  detail:", repr(err))

def openai_generate(prompt: str, size="1024x1024", retries=1) -> bytes:
    last_err = None
    for attempt in range(retries+1):
        try:
            print("üñºÔ∏è images.generate prompt:", prompt[:600])
            r = client.images.generate(model="gpt-image-1", prompt=prompt, size=size)
            return _decode_image_response(r)
        except (APIConnectionError, RateLimitError) as e:
            last_err = e
            wait = 1.5 * (attempt + 1)
            print(f"üåê transient error {e.__class__.__name__}, retry in {wait}s")
            time.sleep(wait)
        except (BadRequestError, APIStatusError, AuthenticationError, PermissionDeniedError) as e:
            _print_api_error("üí• images.generate error", e)
            if isinstance(e, APIStatusError) and getattr(e, "status_code", None) == 403:
                body = ""
                try:
                    body = e.response.text or ""
                except Exception:
                    pass
                if "must be verified" in body:
                    raise RuntimeError("OPENAI_ORG_NOT_VERIFIED")
            raise
        except Exception as e:
            last_err = e
            _print_api_error("üí• images.generate unknown", e)
            raise
    raise last_err

def openai_img2img(prompt: str, ref_bytes: bytes, size="1024x1024", retries=1) -> bytes:
    for attempt in range(retries+1):
        try:
            print("üñºÔ∏è images.edits prompt:", prompt[:600], "| ref_bytes:", len(ref_bytes))
            r = client.images.edits(
                model="gpt-image-1",
                prompt=prompt,
                image=[("image", ref_bytes, "ref.png")],
                size=size,
            )
            return _decode_image_response(r)
        except (APIConnectionError, RateLimitError) as e:
            wait = 1.5 * (attempt + 1)
            print(f"üåê transient error {e.__class__.__name__}, retry in {wait}s")
            time.sleep(wait)
        except (BadRequestError, APIStatusError, AuthenticationError, PermissionDeniedError) as e:
            _print_api_error("üí• images.edits error", e)
            if isinstance(e, APIStatusError) and getattr(e, "status_code", None) == 403:
                body = ""
                try:
                    body = e.response.text or ""
                except Exception:
                    pass
                if "must be verified" in body:
                    raise RuntimeError("OPENAI_ORG_NOT_VERIFIED")
            raise

# ================== Slot ÊäΩÂèñËàáÊ¨Ñ‰ΩçÂ°´ÂÖÖ ==================
SLOT_KEYS = ["character", "appearance", "location", "time", "goal", "conflict", "resolution", "tone"]
MANDATORY_SLOTS = ["character", "location", "goal"]

def rule_extract_slots(text: str) -> Dict[str, str]:
    slots = {}
    # ËßíËâ≤/Â§ñËßÄ
    m = re.search(r"(Âè´|ÂêçÁÇ∫|ÂêçÂ≠óÊòØ|‰ªñÊòØ|Â•πÊòØ)([^Ôºå„ÄÇÔºÅÔºü,.]{1,12})", text)
    if m: slots["character"] = m.group(2).strip()
    if re.search(r"(Áü≠È´Æ|Èï∑È´Æ|Ê£ïÈ´Æ|ÈªëÈ´Æ|ÈáëÈ´Æ|ÁÄèÊµ∑|È¶¨Â∞æ|ÁúºÈè°|Â∏ΩÂ≠ê)", text):
        slots["appearance"] = (slots.get("appearance","") + " " + re.findall(r"(Áü≠È´Æ|Èï∑È´Æ|Ê£ïÈ´Æ|ÈªëÈ´Æ|ÈáëÈ´Æ|ÁÄèÊµ∑|È¶¨Â∞æ|ÁúºÈè°|Â∏ΩÂ≠ê)", text)[0]).strip()
    # Â†¥ÊôØ
    loc_kw = re.findall(r"(Âú®|‰æÜÂà∞|‰ΩçÊñº)([^„ÄÇÔºÅ!Ôºü\n]{2,12})(?:[„ÄÇÔºÅ!Ôºü\n]|$)", text)
    if loc_kw:
        slots["location"] = re.sub(r"^(Âú®|‰æÜÂà∞|‰ΩçÊñº)", "", loc_kw[0][0]+loc_kw[0][1]).strip()
    # ÊôÇÈñì
    if re.search(r"(Êó©‰∏ä|‰∏äÂçà|‰∏≠Âçà|‰∏ãÂçà|ÂÇçÊôö|Êôö‰∏ä|Ê∑±Â§ú|ÈªéÊòé|Ê∏ÖÊô®|ÈªÉÊòè)", text):
        slots["time"] = re.findall(r"(Êó©‰∏ä|‰∏äÂçà|‰∏≠Âçà|‰∏ãÂçà|ÂÇçÊôö|Êôö‰∏ä|Ê∑±Â§ú|ÈªéÊòé|Ê∏ÖÊô®|ÈªÉÊòè)", text)[0]
    # ÁõÆÊ®ô
    m = re.search(r"(ÊÉ≥Ë¶Å|Â∏åÊúõ|ÁõÆÊ®ô|ÁÇ∫‰∫Ü|ÊâìÁÆó)([^„ÄÇÔºÅ!Ôºü\n]{2,20})", text)
    if m: slots["goal"] = m.group(2).strip()
    # Ë°ùÁ™Å
    m = re.search(r"(ÈÅáÂà∞|Èù¢Ëá®|Âõ∞Èõ£|ÊåëÊà∞|Âç±Ê©ü|ÈòªÁ§ô)([^„ÄÇÔºÅ!Ôºü\n]{2,20})", text)
    if m: slots["conflict"] = m.group(2).strip()
    # ÁµêÂ±Ä
    m = re.search(r"(ÊúÄÂæå|ÁµÇÊñº|ÁµêÊûú|Âõ†Ê≠§)([^„ÄÇÔºÅ!Ôºü\n]{2,20})", text)
    if m: slots["resolution"] = m.group(2).strip()
    # Ë™ûÊ∞£
    if re.search(r"(Ê∫´È¶®|Á∑äÂºµ|ÊÑüÂãï|Ê≠°Ê®Ç|Á•ûÁßò|ÂÜíÈö™|ÁôÇÁôí|ÂØ´ÂØ¶|Á´•Ë∂£)", text):
        slots["tone"] = re.findall(r"(Ê∫´È¶®|Á∑äÂºµ|ÊÑüÂãï|Ê≠°Ê®Ç|Á•ûÁßò|ÂÜíÈö™|ÁôÇÁôí|ÂØ´ÂØ¶|Á´•Ë∂£)", text)[0]
    return slots

def llm_extract_slots(text: str) -> Dict[str, str]:
    sysmsg = (
        "Extract story slots from Chinese text and return strict JSON with keys: "
        "character, appearance, location, time, goal, conflict, resolution, tone. "
        "Values should be short phrases (<=12 Chinese characters). Missing keys should be empty strings."
    )
    out = llm_chat(
        [{"role":"system","content":sysmsg},
         {"role":"user","content":text}],
        temperature=0.1
    )
    try:
        data = json.loads(out)
        return {k:(data.get(k) or "").strip() for k in SLOT_KEYS}
    except Exception:
        return {}

def merge_slots(old: Dict[str,str], new: Dict[str,str]) -> Dict[str,str]:
    out = dict(old or {})
    for k in SLOT_KEYS:
        v = (new or {}).get(k)
        if v and (k not in out or not out[k]):  # Âè™Â°´Ë£úÁ©∫ÁôΩÊ¨Ñ‰Ωç
            out[k] = v
    return out

def format_missing_questions(slots: Dict[str,str]) -> str:
    missing = [k for k in MANDATORY_SLOTS if not slots.get(k)]
    qmap = {
        "character":"‰∏ªËßíÊòØË™∞ÔºüÂ§ñËßÄÂ¶Ç‰ΩïÔºü",
        "location":"ÊïÖ‰∫ãÂú®Âì™Ë£°ÁôºÁîüÔºü",
        "goal":"‰∏ªËßíÁöÑÁõÆÊ®ôÊòØ‰ªÄÈ∫ºÔºü",
        "conflict":"ÈÅáÂà∞‰ªÄÈ∫ºÊåëÊà∞Ôºü",
        "time":"Â§ßÊ¶ÇÁôºÁîüÂú®‰ªÄÈ∫ºÊôÇÈñìÔºüÔºàÊó©‰∏ä/Êôö‰∏ä‚Ä¶Ôºâ",
        "resolution":"ÊúÄÂæåÊÄéÈ∫ºÊî∂Â∞æÔºü",
        "tone":"Êï¥È´îÊ∞õÂúçÊÉ≥Ë¶ÅÂÅèÂêëÔºüÔºàÊ∫´È¶®/ÂÜíÈö™‚Ä¶Ôºâ",
    }
    asks = [qmap[m] for m in missing[:2]]
    if asks:
        return "ÊàëÂÖàË®ò‰∏ã‰∫ÜÔºÅ\n" + " / ".join(asks)
    return "ÂæàÂ•ΩÔºÅË¶ÅÊàëÊääÊïÖ‰∫ãÊï¥ÁêÜÊàê 5 ÊÆµÂóéÔºüÁõ¥Êé•Âõû„ÄåÊï¥ÁêÜ„ÄçÂç≥ÂèØ„ÄÇ"

def slots_to_story_text(slots: Dict[str,str]) -> str:
    parts = []
    c = slots.get("character"); a=slots.get("appearance"); loc=slots.get("location")
    t = slots.get("time"); g=slots.get("goal"); con=slots.get("conflict")
    r = slots.get("resolution"); tone=slots.get("tone")
    if c and a: parts.append(f"{c}Ôºå{a}„ÄÇ")
    elif c: parts.append(f"{c}„ÄÇ")
    if loc or t: parts.append(f"ÊïÖ‰∫ãÁôºÁîüÂú®{t or ''}{loc or ''}„ÄÇ")
    if g: parts.append(f"‰ªñ/Â•πÊÉ≥Ë¶Å{g}„ÄÇ")
    if con: parts.append(f"ÈÄî‰∏≠ÈÅáÂà∞{con}„ÄÇ")
    if r: parts.append(f"ÊúÄÂæå{r}„ÄÇ")
    if tone: parts.append(f"Êï¥È´îÊ∞õÂúçÂÅè{tone}„ÄÇ")
    return "".join(parts)

# ================== Èö±ËóèÂèÉËÄÉÂúñÔºàÂê´ÈôçÁ¥öÔºâ ==================
def ensure_hidden_reference(story_id: str):
    story = read_story(story_id) or {}
    feats = story.get("character_features")
    href  = story.get("hidden_reference_image_url")
    if feats and href:
        return
    slots = (story.get("slots") or {})
    base_text = story.get("story_text","") or slots_to_story_text(slots)
    if not feats:
        feats = extract_features_from_text(base_text)
        save_story(story_id, {"character_features": feats})

    headshot_prompt = build_prompt(
        "Head-and-shoulders portrait, neutral expression, facing camera.",
        feats,
        extra=SAFE_HEADSHOT_EXTRA
    )
    try:
        img = openai_generate(headshot_prompt)
        url = gcs_upload_bytes(img, f"{story_id}_hidden_ref.png")
        feats = refine_features_with_image(url, feats)
        save_story(story_id, {"character_features": feats, "hidden_reference_image_url": url})
    except Exception as e:
        print("‚ö†Ô∏è hidden reference failed, continue without it:", repr(e))
        save_story(story_id, {"hidden_reference_image_url": None})

# ================== ÁîüÊàêÂ†¥ÊôØÂúñ ==================
def generate_scene_image(story_id: str, idx: int, extra: str="") -> str:
    story  = read_story(story_id) or {}
    scenes = story.get("scenes_text") or []
    if not scenes or idx < 1 or idx > 5:
        raise ValueError("Scenes not ready or index out of range.")

    base_text = story.get("story_text","") or slots_to_story_text(story.get("slots") or {})
    feats = story.get("character_features") or extract_features_from_text(base_text)
    save_story(story_id, {"character_features": feats})

    try:
        ensure_hidden_reference(story_id)
    except Exception as e:
        print("‚ö†Ô∏è ensure_hidden_reference error:", repr(e))

    scene_text = scenes[idx-1]
    prompt     = build_prompt(scene_text, feats, extra=extra)
    print(f"üìù scene[{idx}] prompt => {prompt}")

    ref_url = read_prev_image_url(story_id, idx) or (read_story(story_id) or {}).get("hidden_reference_image_url")

    try:
        if ref_url:
            rb  = requests.get(ref_url, timeout=30).content
            img = openai_img2img(prompt, rb)
        else:
            img = openai_generate(prompt)
    except RuntimeError as e:
        if str(e) == "OPENAI_ORG_NOT_VERIFIED":
            raise RuntimeError("OPENAI_ORG_NOT_VERIFIED")
        else:
            raise
    except APIStatusError as e:
        print("‚Ü©Ô∏è fallback to safer prompt due to APIStatusError")
        safer = prompt + " Avoid showing specific logos, school names, medical settings, or explicit content."
        img = openai_generate(safer)

    url = gcs_upload_bytes(img, f"{story_id}_s{idx}.png")
    save_scene(story_id, idx, {"text": scene_text, "prompt": prompt, "image_url": url})
    return url

# ================== ÊïÖ‰∫ãÊï¥ÁêÜ / Â∞çË©± ==================
def compact_story_from_dialog(messages: List[Dict[str, Any]]) -> str:
    user_lines = [m["content"] for m in messages if m.get("role")=="user"]
    return "\n".join(user_lines[-12:]).strip()

def summarize_and_store(user_id: str, story_id: str, story_text: str, slots: Dict[str,str]) -> List[str]:
    base = slots_to_story_text(slots)
    corpus = (base + "\n" + story_text).strip() if story_text else base
    scenes = split_into_five_scenes(corpus)
    save_story(story_id, {
        "user_id": user_id,
        "story_text": corpus,
        "slots": slots,
        "scenes_text": scenes,
        "style_preset": "watercolor_storybook_v1",
        "updated_at": firestore.SERVER_TIMESTAMP
    })
    return scenes

def chinese_index_to_int(s: str) -> int:
    m = re.search(r"[‰∏Ä‰∫å‰∏âÂõõ‰∫î12345]", s)
    if not m: return -1
    mp = {'‰∏Ä':1,'‰∫å':2,'‰∏â':3,'Âõõ':4,'‰∫î':5,'1':1,'2':2,'3':3,'4':4,'5':5}
    return mp[m.group(0)]

# ================== Ë∑ØÁî± ==================
@app.route("/")
def root():
    return "LINE story image bot is running."

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature")
    body = request.get_data(as_text=True)
    if not signature:
        print("‚ö†Ô∏è Missing X-Line-Signature, ignore.")
        return "OK"
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

# ================== ‰∏ª‰∫ã‰ª∂ËôïÁêÜ ==================
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text    = (event.message.text or "").strip()
    reply_token = event.reply_token
    print(f"üì© {user_id}: {text}")

    sess = user_sessions.setdefault(user_id, {"messages": [], "story_id": None})
    sess["messages"].append({"role":"user","content":text})
    if len(sess["messages"]) > 60: sess["messages"] = sess["messages"][-60:]
    save_chat(user_id, "user", text)

    try:
        # 1) ÈñãÂßãË™™ÊïÖ‰∫ã
        if re.search(r"(ÈñãÂßãË™™ÊïÖ‰∫ã|Ë™™ÊïÖ‰∫ã|Ë¨õÂÄãÊïÖ‰∫ã|ÈñãÂßãÂâµ‰Ωú|ÊàëÂÄë‰æÜË¨õÊïÖ‰∫ãÂêß)", text):
            story_id = f"{user_id}-{uuid.uuid4().hex[:6]}"
            sess["story_id"] = story_id
            save_story(story_id, {
                "user_id": user_id,
                "created_at": firestore.SERVER_TIMESTAMP,
                "slots": {}
            })
            line_bot_api.reply_message(reply_token, TextSendMessage("Â•ΩÁöÑÔºÅËá™Áî±ÊèèËø∞‰Ω†ÁöÑÊïÖ‰∫ã„ÄÇ\nÁµ¶ÂÆåË¶ÅÁ¥†ÂæåÔºåË∑üÊàëË™™„ÄåÊï¥ÁêÜ„ÄçÊàëÊúÉÂàáÊàê 5 ÊÆµ„ÄÇ"))
            return

        # 2) Êï¥ÁêÜ ‚Üí ÂàÜ 5 ÊÆµ
        if re.search(r"(Êï¥ÁêÜ|Á∏ΩÁµê|summary)", text):
            story_id = sess.get("story_id") or f"{user_id}-{uuid.uuid4().hex[:6]}"
            sess["story_id"] = story_id
            story_doc = read_story(story_id) or {}
            curr_slots = story_doc.get("slots") or {}
            base_text = compact_story_from_dialog(sess["messages"])

            scenes = summarize_and_store(user_id, story_id, base_text, curr_slots)
            threading.Thread(target=ensure_hidden_reference, args=(story_id,), daemon=True).start()
            human = "\n".join([f"{i+1}. {s}" for i,s in enumerate(scenes)])
            line_bot_api.reply_message(reply_token, TextSendMessage("Êï¥ÁêÜÂ•Ω‰∫ÜÔºÅ\n\n"+human+"\n\nË¶ÅÁï´Âì™‰∏ÄÊÆµÔºüÔºàÂ¶ÇÔºöÁï´Á¨¨‰∏ÄÊÆµÔºâ"))
            return

        # 3) Áï´Á¨¨ N ÊÆµ
        if re.search(r"(Áï´Á¨¨[‰∏Ä‰∫å‰∏âÂõõ‰∫î12345]ÊÆµ)", text):
            n = chinese_index_to_int(text)
            if n == -1:
                line_bot_api.reply_message(reply_token, TextSendMessage("Ë´ãÂëäË®¥ÊàëË¶ÅÁï´Á¨¨ÂπæÊÆµÔºà1~5Ôºâ"))
                return
            story_id = sess.get("story_id")
            if not story_id:
                story_id = f"{user_id}-{uuid.uuid4().hex[:6]}"
                sess["story_id"] = story_id
                save_story(story_id, {"user_id": user_id, "created_at": firestore.SERVER_TIMESTAMP, "slots": {}})

            story_doc = read_story(story_id) or {}
            if not story_doc.get("scenes_text"):
                base_text = compact_story_from_dialog(sess["messages"])
                scenes = summarize_and_store(user_id, story_id, base_text, story_doc.get("slots") or {})
                threading.Thread(target=ensure_hidden_reference, args=(story_id,), daemon=True).start()
                human = "\n".join([f"{i+1}. {s}" for i,s in enumerate(scenes)])
                line_bot_api.reply_message(reply_token, TextSendMessage("ÂÖàÂπ´‰Ω†Êï¥ÁêÜ‰∫ÜÔºÅ\n\n"+human+"\n\nÊàëÈñãÂßãÁï´ÊåáÂÆöÊÆµËêΩÂõâÔΩû"))
            extra = re.sub(r"Áï´Á¨¨[‰∏Ä‰∫å‰∏âÂõõ‰∫î12345]ÊÆµ", "", text).strip(" Ôºå,„ÄÇ.!ÔºÅ")
            line_bot_api.reply_message(reply_token, TextSendMessage(f"Êî∂Âà∞ÔºÅÊàëÈñãÂßãÁï´Á¨¨ {n} ÊÆµÔºåÂÆåÊàêÂ∞±ÂÇ≥Áµ¶‰Ω†ÔΩû"))

            def bg_job():
                with GEN_SEMAPHORE:
                    try:
                        url = generate_scene_image(sess["story_id"], n, extra=extra)
                        line_bot_api.push_message(user_id, [
                            TextSendMessage(f"Á¨¨ {n} ÊÆµÂÆåÊàêÔºÅ"),
                            ImageSendMessage(url, url)
                        ])
                        save_chat(user_id, "assistant", f"[image]{url}")
                    except RuntimeError as e:
                        if str(e) == "OPENAI_ORG_NOT_VERIFIED":
                            line_bot_api.push_message(user_id, TextSendMessage(
                                "ÂúñÂÉèÁîüÊàêÂäüËÉΩÂ∞öÊú™ÂïüÁî®Ôºö‰Ω†ÁöÑ OpenAI ÁµÑÁπîÊú™ÈÄöÈÅé Verify„ÄÇ\n"
                                "Ë´ãÂà∞ OpenAI Platform ‚Üí Organization ‚Üí General ‚Üí Verify Organization„ÄÇ\n"
                                "ÂÆåÊàêÂæåÊï∏ÂàÜÈêòÂÜçË©¶‰∏ÄÊ¨°„ÄÇ"
                            ))
                        else:
                            print("‚ùå RuntimeError:", repr(e))
                            traceback.print_exc()
                            line_bot_api.push_message(user_id, TextSendMessage("ÈÄôÊÆµÊö´ÊôÇÁï´‰∏çÂá∫‰æÜ„ÄÇÂ∑≤Ë®òÈåÑÂÆåÊï¥ÈåØË™§Âú®Êó•Ë™åÔºåË´ãÁ®çÂæåÂÜçË©¶ÊàñÊèõÂÄãÊèèËø∞„ÄÇ"))
                    except Exception as e:
                        print("‚ùå ÁîüÊàêÁ¨¨NÊÆµÂ§±ÊïóÔºö", repr(e))
                        traceback.print_exc()
                        line_bot_api.push_message(user_id, TextSendMessage("ÈÄôÊÆµÊö´ÊôÇÁï´‰∏çÂá∫‰æÜ„ÄÇÂ∑≤Ë®òÈåÑÂÆåÊï¥ÈåØË™§Âú®Êó•Ë™åÔºåË´ãÁ®çÂæåÂÜçË©¶ÊàñÊèõÂÄãÊèèËø∞„ÄÇ"))
            threading.Thread(target=bg_job, daemon=True).start()
            return

        # 4) ‰∏ÄËà¨Â∞çË©±ÔºöÊäΩ slot ‚Üí Âêà‰Ωµ ‚Üí Âè™ÂïèÁº∫ÁöÑ
        story_id = sess.get("story_id") or f"{user_id}-{uuid.uuid4().hex[:6]}"
        sess["story_id"] = story_id
        story_doc = read_story(story_id) or {}
        curr_slots = story_doc.get("slots") or {}

        rough = rule_extract_slots(text)
        fine  = llm_extract_slots(text)
        merged = merge_slots(curr_slots, merge_slots(rough, fine))

        save_story(story_id, {"slots": merged, "updated_at": firestore.SERVER_TIMESTAMP})

        reply = format_missing_questions(merged)
        line_bot_api.reply_message(reply_token, TextSendMessage(reply))
        save_chat(user_id, "assistant", reply)

    except Exception as e:
        print("‚ùå handle_message error:", repr(e))
        traceback.print_exc()
        line_bot_api.reply_message(reply_token, TextSendMessage("Â∞èÁπ™ÈÄôÈÇäÂá∫‰∫Ü‰∏ÄÈªûÁãÄÊ≥ÅÔºåÁ≠âÁ≠âÂÜçË©¶Ë©¶ üôá"))

# ================== ÂïüÂãï ==================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
